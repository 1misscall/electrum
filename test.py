from lib import bitcoin, network, keystore, lightning
import tempfile
import subprocess
import sys

bitcoin.set_simnet()


#rand = bytes([
#		0xb7, 0x94, 0x38, 0x5f, 0x2d, 0x1e, 0xf7, 0xab,
#		0x4d, 0x92, 0x73, 0xd1, 0x90, 0x63, 0x81, 0xb4,
#		0x4f, 0x2f, 0x6f, 0x25, 0x18, 0xa3, 0xef, 0xb9,
#		0x64, 0x49, 0x18, 0x83, 0x31, 0x98, 0x47, 0x53
#])
#
#byts = int("0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6", 16).to_bytes(length=65,byteorder="big")
##K_compressed = bitcoin.point_to_ser(bitcoin.ser_to_point(byts), True)
#
#pre = b"\x06\x00\x00" + bitcoin.hash_160(byts)
#
#assert len(bitcoin.base_decode("4NyWwuQo2TxzanWtpKaEynRa2B8EKHnA3iQnf", 27, 58)) == 27
#
#print(bitcoin.base_encode(pre + bitcoin.Hash(pre)[:4], 58))
#print("previous should match BIP142 example")

def spcToByt(i):
  return bytes(eval(i.replace(" ", ",")))

#has = lightning.calcWitnessSignatureHash(spcToByt("[82 33 2 130 61 12 247 115 170 60 103 175 191 181 159 156 243 73 252 255 102 215 249 211 156 207 29 214 50 36 251 186 12 139 31 33 2 191 199 206 31 229 88 131 244 83 190 108 121 76 189 229 230 250 231 255 5 246 14 104 247 70 36 18 32 90 151 2 30 82 174]"),
#  lightning.TxSigHashes(hashPrevOuts="013d4a9f0fe05351c16c6e1164d50948628faaddeb6c86901418f8e1a0955ded", hashSequence="585db990133f7024d2e159f3c916f13b5a5d18caa2fd1fcdc9024a0beb162e35", hashOutputs="ae5c810c14ede2af1413786c9a36cf849f057b5e26c897c7cbf18e6b63e7be4d"),
#  b"\x01",
#  spcToByt("[2 0 0 0 1 89 96 63 16 212 203 49 7 86 82 201 223 255 144 215 243 254 127 107 181 215 247 152 239 45 29 208 26 253 160 160 44 1 0 0 0 0 59 35 143 128 2 0 225 245 5 0 0 0 0 34 0 32 25 78 24 50 10 30 104 132 211 71 170 19 70 55 33 189 75 146 188 250 90 122 220 30 3 87 138 227 84 10 207 63 168 243 224 17 0 0 0 0 22 0 20 104 100 114 158 95 167 44 213 25 221 78 203 174 101 79 175 139 219 240 100 102 142 144 32]"),
#  0,
#  400_000_000
#  )
#
#ref = spcToByt("[2 0 0 0 237 93 149 160 225 248 24 20 144 134 108 235 221 170 143 98 72 9 213 100 17 110 108 193 81 83 224 15 159 74 61 1 53 46 22 235 11 74 2 201 205 31 253 162 202 24 93 90 59 241 22 201 243 89 225 210 36 112 63 19 144 185 93 88 89 96 63 16 212 203 49 7 86 82 201 223 255 144 215 243 254 127 107 181 215 247 152 239 45 29 208 26 253 160 160 44 1 0 0 0 71 82 33 2 130 61 12 247 115 170 60 103 175 191 181 159 156 243 73 252 255 102 215 249 211 156 207 29 214 50 36 251 186 12 139 31 33 2 191 199 206 31 229 88 131 244 83 190 108 121 76 189 229 230 250 231 255 5 246 14 104 247 70 36 18 32 90 151 2 30 82 174 0 132 215 23 0 0 0 0 59 35 143 128 77 190 231 99 107 142 241 203 199 151 200 38 94 123 5 159 132 207 54 154 108 120 19 20 175 226 237 20 12 129 92 174 102 142 144 32 1 0 0 0]")

has = lightning.rawTxInWitnessSignature(spcToByt("[1 0 0 0 1 162 173 105 87 241 16 198 174 144 247 150 184 96 11 98 176 155 244 127 226 92 114 167 101 4 1 211 136 135 75 2 49 0 0 0 0 0 255 255 255 255 2 82 197 224 17 0 0 0 0 22 0 20 198 189 27 216 127 204 244 17 188 148 253 74 113 68 248 158 83 0 19 95 0 225 245 5 0 0 0 0 25 118 169 20 130 23 208 192 6 170 19 185 85 87 248 228 246 162 204 35 140 116 30 232 136 172 0 0 0 0]"), lightning.TxSigHashes(hashPrevOuts="9eeed7f97d320612c785060fc68c205af028af198f6f48fb687c89a03f63618f", hashSequence="445066705e799022b7095f7ceca255149f43acfc47e7f59e551f7bce2930b13b", hashOutputs="29fd886fbd952603195394ae42cda6d21205dfd0e5dc53992c04a21159ca2926"), 0, 400_000_000, spcToByt("[0 20 196 24 127 254 103 252 10 102 74 125 39 251 158 43 0 46 227 208 30 145]"), b"\x01", bitcoin.EC_KEY(spcToByt("[175 165 200 116 93 208 102 10 210 39 52 160 20 226 170 242 195 228 31 230 224 232 35 65 185 246 49 239 185 131 105 250]")))

ref = spcToByt("[48 68 2 32 54 240 114 42 76 253 165 13 120 89 52 107 224 85 255 178 88 167 189 59 27 141 109 188 64 248 40 255 132 118 2 254 2 32 74 37 154 206 35 124 116 51 59 74 66 49 9 77 157 214 32 45 79 137 22 138 49 170 45 52 148 173 25 140 141 42]")

if has != ref:
  with tempfile.NamedTemporaryFile() as a:
   with tempfile.NamedTemporaryFile() as b:
    a.write("\n".join(str(x) for x in ref).encode("ascii"))
    b.write("\n".join(str(x) for x in has).encode("ascii"))
    a.flush()
    b.flush()
    p = subprocess.Popen(["diff","-y",a.name,b.name], stdout=subprocess.PIPE)
    print("\n".join(str(num) + " " + st for num, st in enumerate(p.communicate()[0].decode("ascii").split("\n"))))
#assert has == spcToByt("[10 118 103 165 158 131 10 105 231 186 76 157 230 147 173 14 160 56 134 50 40 86 138 58 62 24 185 69 12 174 224 250]"), list(has)
